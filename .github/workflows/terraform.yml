name: 'Terraform GitOps Workflow'

on: workflow_dispatch
  # push:
  #   branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]

permissions:
  contents: read

jobs:
  terraform-ci:
    name: 'Terraform CI'
    runs-on: ubuntu-latest
    env: # Sets env variables for plan to auth to AWS
      AWS_ACCESS_KEY_ID: ${{ secrets.CI_AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.CI_AWS_SECRET_ACCESS_KEY }}
    defaults:
      run:
        shell: bash
    steps:
    - name: Install Terraform # Only need to install it once for it to propogate to all jobs
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.7
    - name: Checkout
      uses: actions/checkout@v3
    - name: tfsec
      uses: aquasecurity/tfsec-action@v1.0.0
      with:
        soft_fail: true
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
    - name: Terraform Init
      id: init
      run: terraform init
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
    - name: Terraform Plan
      id: plan
      run: terraform plan --var-file="vars/dev.tfvars" -input=false
      continue-on-error: true
    # - name: Update Pull Request
    #   uses: actions/github-script@v6
    #   if: github.event_name == 'pull_request'
    #   env:
    #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
    #   with:
    #     github-token: ${{ secrets.GITHUB_TOKEN }}
    #     script: |
    #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
    #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
    #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
    #       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

    #       <details><summary>Show Plan</summary>

    #       \`\`\`\n
    #       ${process.env.PLAN}
    #       \`\`\`

    #       </details>

    #       *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

    #       github.rest.issues.createComment({
    #         issue_number: context.issue.number,
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         body: output
    #       })
    # - name: Terraform Plan Status
    #   if: steps.plan.outcome == 'failure'
    #   run: exit 1

  terraform-cd-dev:
    name: 'Terraform CD Dev'
    if: github.ref == 'refs/heads/"main"'
    needs: terraform-ci
    runs-on: ubuntu-latest
    environment: dev
    env: # Sets env variables from our dev environment for plan and apply
      AWS_ACCESS_KEY_ID: ${{ secrets.DEV_AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Terraform Init
      run: terraform init
    - name: Terraform Plan
      run: terraform plan --var-file="vars/dev.tfvars" -input=false
    - name: Terraform Apply
      run: terraform apply --var-file="vars/dev.tfvars" -auto-approve

  # terraform-cd-prod:
  #   name: 'Terraform CD Prod'
  #   if: github.ref == 'refs/heads/"main"'
  #   needs: terraform-cd-dev
  #   runs-on: ubuntu-latest
  #   environment: prod
    # env: # Sets env variables from our dev environment for plan and apply
    #   AWS_ACCESS_KEY_ID: ${{ secrets.PROD_AWS_ACCESS_KEY }}
    #   AWS_SECRET_ACCESS_KEY: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
  #   defaults:
  #     run:
  #       shell: bash
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v3
  #   - name: Terraform Init
  #     run: terraform init
    # - name: Terraform Plan
    #   run: terraform plan --var-file="vars/prod.tfvars" -input=false
    # - name: Terraform Apply
    #   run: terraform apply --var-file="vars/prod.tfvars" -auto-approve
